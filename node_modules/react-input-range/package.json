{
  "_args": [
    [
      {
        "raw": "react-input-range",
        "scope": null,
        "escapedName": "react-input-range",
        "name": "react-input-range",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/Users/ayrtonhishinuma/Desktop/projects/givagift"
    ]
  ],
  "_from": "react-input-range@latest",
  "_id": "react-input-range@1.1.3",
  "_inCache": true,
  "_location": "/react-input-range",
  "_nodeVersion": "6.9.4",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/react-input-range-1.1.3.tgz_1493816884124_0.3070815592072904"
  },
  "_npmUser": {
    "name": "davidchin",
    "email": "davidchin.yf@gmail.com"
  },
  "_npmVersion": "4.1.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "react-input-range",
    "scope": null,
    "escapedName": "react-input-range",
    "name": "react-input-range",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/react-input-range/-/react-input-range-1.1.3.tgz",
  "_shasum": "2eb6d27e82cbd31370f901248c51ede696cef6a8",
  "_shrinkwrap": null,
  "_spec": "react-input-range",
  "_where": "/Users/ayrtonhishinuma/Desktop/projects/givagift",
  "author": {
    "name": "David Chin"
  },
  "bugs": {
    "url": "https://github.com/davidchin/react-input-range/issues"
  },
  "dependencies": {
    "autobind-decorator": "^1.3.4",
    "prop-types": "^15.5.8"
  },
  "description": "React component for inputting numeric values within a range",
  "devDependencies": {
    "@types/react": "^15.0.1",
    "autoprefixer": "^6.6.1",
    "babel-cli": "^6.22.2",
    "babel-core": "^6.22.1",
    "babel-eslint": "^7.1.1",
    "babel-loader": "^6.2.10",
    "babel-plugin-add-module-exports": "^0.2.1",
    "babel-plugin-istanbul": "^3.1.2",
    "babel-plugin-transform-decorators-legacy": "^1.3.4",
    "babel-plugin-transform-object-rest-spread": "^6.22.0",
    "babel-plugin-transform-react-jsx": "^6.22.0",
    "babel-preset-es2015": "^6.22.0",
    "babel-preset-es2016": "^6.22.0",
    "babel-preset-react": "^6.22.0",
    "conventional-changelog-cli": "~1.2.0",
    "css-loader": "^0.27.3",
    "dom4": "^1.8.3",
    "enzyme": "^2.7.1",
    "esdoc": "^0.5.2",
    "esdoc-importpath-plugin": "^0.1.0",
    "eslint": "^3.14.0",
    "eslint-config-airbnb": "^14.0.0",
    "eslint-loader": "^1.6.1",
    "eslint-plugin-import": "^2.2.0",
    "eslint-plugin-jsx-a11y": "^4.0.0",
    "eslint-plugin-react": "^6.9.0",
    "extract-text-webpack-plugin": "^2.1.0",
    "jasmine-core": "^2.5.2",
    "karma": "^1.4.0",
    "karma-babel-preprocessor": "^6.0.1",
    "karma-coverage": "^1.1.1",
    "karma-jasmine": "^1.1.0",
    "karma-mocha-reporter": "^2.2.2",
    "karma-phantomjs-launcher": "^1.0.2",
    "karma-sourcemap-loader": "^0.3.7",
    "karma-webpack": "^2.0.1",
    "node-sass": "^4.3.0",
    "postcss-loader": "^1.2.2",
    "react": "^15.5.4",
    "react-addons-test-utils": "^15.4.2",
    "react-dom": "^15.5.4",
    "sass-lint": "^1.10.2",
    "sass-loader": "^6.0.3",
    "sasslint-webpack-plugin": "^1.0.4",
    "style-loader": "^0.14.0",
    "uglify-js": "^2.8.16",
    "uglifyjs-webpack-plugin": "^0.3.1",
    "webpack": "^2.2.1",
    "webpack-dev-server": "^2.4.2"
  },
  "directories": {},
  "dist": {
    "shasum": "2eb6d27e82cbd31370f901248c51ede696cef6a8",
    "tarball": "https://registry.npmjs.org/react-input-range/-/react-input-range-1.1.3.tgz"
  },
  "gitHead": "870d671d6eddaa94d5d534f3f8fbef64ec5fdf27",
  "homepage": "https://github.com/davidchin/react-input-range#readme",
  "keywords": [
    "react",
    "react-component",
    "range-slider",
    "input-range",
    "range",
    "slider",
    "form",
    "input"
  ],
  "license": "MIT",
  "main": "lib/js/index.js",
  "maintainers": [
    {
      "name": "davidchin",
      "email": "davidchin.yf@gmail.com"
    }
  ],
  "name": "react-input-range",
  "optionalDependencies": {},
  "peerDependencies": {
    "react": "^15.0.0",
    "react-dom": "^15.0.0"
  },
  "readme": "# react-input-range\n\n`InputRange` is a React component allowing users to input numeric values within a specific range. It can accept a single value, or a range of values (min/max). By default, basic styles are applied, but can be overridden depending on your design requirements.\n\n[![Build Status](https://travis-ci.org/davidchin/react-input-range.svg?branch=master)](https://travis-ci.org/davidchin/react-input-range)\n\n## Demo\nA CodePen demo is available [here](http://codepen.io/davidchin/full/GpNvqw/).\n\n## Installation\n\n1. Install `react-input-range` using npm (or [yarn]). `npm install react-input-range`\n2. Import `react-input-range` to use `InputRange` component.\n3. Optionally, import `react-input-range/lib/css/index.css` if you want to apply the default styling.\n\n## Usage\n\nTo accept min/max value:\n```jsx\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport InputRange from 'react-input-range';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      value: { min: 2, max: 10 },\n    };\n  }\n\n  render() {\n    return (\n      <InputRange\n        maxValue={20}\n        minValue={0}\n        value={this.state.value}\n        onChange={value => this.setState({ value })} />\n    );\n  }\n}\n\nReactDOM.render(\n  <App />,\n  document.getElementById('app')\n);\n```\n\nTo accept a single value:\n```jsx\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = { value: 10 };\n  }\n\n  render() {\n    return (\n      <InputRange\n        maxValue={20}\n        minValue={0}\n        value={this.state.value}\n        onChange={value => this.setState({ value })} />\n    );\n  }\n}\n```\n\nTo format labels:\n```jsx\n<InputRange\n  formatLabel={value => `${value}cm`}\n  value={this.state.value}\n  onChange={value => this.setState({ value })} />\n```\n\nTo specify the amount of increment/decrement\n```jsx\n<InputRange\n  step={2}\n  value={this.state.value}\n  onChange={value => this.setState({ value })} />\n```\n\n## API\n\n### InputRange#props\n\n#### ariaLabelledby: string\n\nSet `aria-labelledby` attribute to your component.\n\n#### ariaControls: string\n\nSet `aria-controls` attribute to your component.\n\n#### classNames: InputRangeClassNames\n\nOverride the default CSS classes applied to your component and its sub-components.\n\n#### disabled: boolean\n\nIf this property is set to true, your component is disabled. This means you'll not able to interact with it.\n\n#### formatLabel: (value: number, type: string): string\n\nBy default, value labels are displayed as plain numbers. If you want to change the display, you can do so by passing in a function. The function can return something different, i.e.: append a unit, reduce the precision of a number.\n\n#### maxValue: number\n\nSet a maximum value for your component. You cannot drag your slider beyond this value.\n\n#### minValue: number\n\nSet a minimum value for your component. You cannot drag your slider under this value.\n\n#### name: string\n\nSet a name for your form component.\n\n#### onChange: (value: number | Range): void\n\nWhenever your user interacts with your component (i.e.: dragging a slider), this function gets called. Inside the function, you should assign the new value to your component.\n\n#### onChangeStart: (value: number | Range): void\n\nWhenever your user starts interacting with your component (i.e.: `onMouseDown`, or `onTouchStart`), this function gets called.\n\n#### onChangeComplete: (value: number | Range): void\n\nEvery mouse / touch event can trigger multiple updates, therefore causing `onChange` callback to fire multiple times. On the other hand, `onChangeComplete` callback only gets called when the user stops dragging.\n\n#### step: number\n\nThe default increment/decrement of your component is 1. You can change that by setting a different number to this property.\n\n#### value: number | Range\n\nSet the current value for your component. If only a single number is provided, only a single slider will get rendered. If a range object (min/max) is provided, two sliders will get rendered\n\n### Types\n\n#### InputRangeClassNames\n* activeTrack: string\n* disabledInputRange: string\n* inputRange: string\n* labelContainer: string\n* maxLabel: string\n* minLabel: string\n* slider: string\n* sliderContainer: string\n* track: string\n* valueLabel: string\n\n#### Range\n* max: number\n* min: number\n\n## Development\n\nIf you want to work on this project locally, you need to grab all of its dependencies, for which \nwe recommend using [yarn]. You can find the instructions to setup yarn [here](https://yarnpkg.com/docs/install).\n```\nyarn install\n```\n\nAfter that, you should be able run to preview\n```\nyarn dev\n```\n\nTo test\n```\nyarn test\n```\n\nContributions are welcome. :)\n\n[yarn]: https://yarnpkg.com/\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/davidchin/react-input-range.git"
  },
  "scripts": {
    "build": "npm run build:lib && npm run build:scss && npm run build:bundle",
    "build:bundle": "NODE_ENV=production webpack",
    "build:lib": "NODE_ENV=production babel src/js --out-dir lib/js --source-maps",
    "build:scss": "NODE_ENV=production node-sass src/scss --recursive --source-map true --output lib/css",
    "changelog": "conventional-changelog --preset angular --infile CHANGELOG.md --same-file",
    "dev": "webpack-dev-server --inline --config webpack-example.config.babel.js --content-base example",
    "docs": "esdoc",
    "lint": "npm run lint:js && npm run lint:scss",
    "lint:js": "eslint src/js/ --ext .js --ext .jsx",
    "lint:scss": "sass-lint --verbose --no-exit",
    "prebuild": "npm test && rm -rf lib",
    "prepublish": "npm run build",
    "pretest": "npm run lint",
    "test": "karma start --single-run"
  },
  "types": "react-input-range.d.ts",
  "version": "1.1.3"
}
