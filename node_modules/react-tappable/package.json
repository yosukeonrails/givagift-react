{
  "_args": [
    [
      {
        "raw": "react-tappable",
        "scope": null,
        "escapedName": "react-tappable",
        "name": "react-tappable",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/Users/ayrtonhishinuma/Desktop/projects/givagift"
    ]
  ],
  "_from": "react-tappable@latest",
  "_id": "react-tappable@1.0.0",
  "_inCache": true,
  "_location": "/react-tappable",
  "_nodeVersion": "7.7.1",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/react-tappable-1.0.0.tgz_1494742254354_0.5390433436259627"
  },
  "_npmUser": {
    "name": "jedwatson",
    "email": "jed.watson@me.com"
  },
  "_npmVersion": "4.4.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "react-tappable",
    "scope": null,
    "escapedName": "react-tappable",
    "name": "react-tappable",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/react-tappable/-/react-tappable-1.0.0.tgz",
  "_shasum": "16a3e9e6ce2ab764569ec56e45a591d660a966a6",
  "_shrinkwrap": null,
  "_spec": "react-tappable",
  "_where": "/Users/ayrtonhishinuma/Desktop/projects/givagift",
  "author": {
    "name": "Jed Watson"
  },
  "browserify-shim": {
    "create-react-class": "global:createReactClass",
    "prop-types": "global:PropTypes",
    "react": "global:React",
    "react-dom": "global:ReactDOM"
  },
  "bugs": {
    "url": "https://github.com/JedWatson/react-tappable/issues"
  },
  "dependencies": {},
  "description": "Touch / Tappable Event Handling Component for React",
  "devDependencies": {
    "babel-eslint": "^4.1.3",
    "create-react-class": "^15.5.2",
    "eslint": "^1.6.0",
    "eslint-plugin-react": "^3.5.1",
    "gulp": "^3.9.1",
    "prop-types": "^15.5.8",
    "react": "^0.14 || ^15.0.0-rc || ^15.0.0",
    "react-component-gulp-tasks": "^0.7.7",
    "react-dom": "^0.14 || ^15.0.0-rc || ^15.0.0"
  },
  "directories": {},
  "dist": {
    "shasum": "16a3e9e6ce2ab764569ec56e45a591d660a966a6",
    "tarball": "https://registry.npmjs.org/react-tappable/-/react-tappable-1.0.0.tgz"
  },
  "gitHead": "6bfec78156619ba5a2b488289954196e235859a8",
  "homepage": "https://github.com/JedWatson/react-tappable#readme",
  "keywords": [
    "react",
    "react-component",
    "tap",
    "tappable",
    "touch",
    "mobile"
  ],
  "license": "MIT",
  "main": "lib/TapAndPinchable.js",
  "maintainers": [
    {
      "name": "jedwatson",
      "email": "jed.watson@me.com"
    }
  ],
  "name": "react-tappable",
  "optionalDependencies": {},
  "peerDependencies": {
    "create-react-class": "^15.5.2",
    "prop-types": "^15.5.8",
    "react": "^0.14 || ^15.0.0-rc || ^15.0.0",
    "react-dom": "^0.14 || ^15.0.0-rc || ^15.0.0"
  },
  "readme": "React-Tappable\n==============\n\nTappable component for React. Abstracts touch events to implement `onTap`, `onPress`, and pinch events.\n\nThe events mimic their native equivalents as closely as possible:\n\n* the baseClass (default: `Tappable`) has `-active` or `-inactive` added to it to enable pressed-state styling\n* the pressed state is visually cancelled if the touch moves too far away from the element, but resumes if the touch comes back again\n* when you start scrolling a parent element, the touch event is cancelled\n* if the `onPress` property is set, it will cancel the touch event after the press happens\n\nWhen touch events are not supported, it will fall back to mouse events. Keyboard events are also supported, emulating the behaviour of native button controls.\n\n\n## Demo & Examples\n\nLive demo: [jedwatson.github.io/react-tappable](http://jedwatson.github.io/react-tappable/)\n\nTo build the examples locally, run:\n\n```\nnpm install\ngulp dev\n```\n\nThen open [`localhost:8000`](http://localhost:8000) in a browser.\n\n\n## Installation\n\nThe easiest way to use React-tappable is to install it from npm.\n\n```\nnpm install react-tappable --save\n```\n\nEnsure to include it in your own React build process (using [Browserify](http://browserify.org), etc).\n\nYou could also use the standalone build by including `dist/react-tappable.js` in your page;  but, if you do this, make sure you have already included React, and that it is available globally.\n\n\n## Usage\n\nReact-tappable generates a React component (defaults to `<span>`) and binds touch events to it.\n\nTo disable default event handling (e.g. scrolling) set the `preventDefault` prop.\n\n```jsx\nimport Tappable from 'react-tappable';\n\n<Tappable onTap={this.handleTapEvent}>Tap me</Tappable>\n```\n\nFor a lighter component, you can opt-in to just the features you need:\n\n```jsx\nimport Tappable from 'react-tappable/lib/Tappable';\nimport Pinchable from 'react-tappable/lib/Pinchable';\nimport TapAndPinchable from 'react-tappable/lib/TapAndPinchable';\n\n<Tappable onTap={this.handleTapEvent}>I respond to Tap events</Tappable>\n<Pinchable onPinch={this.handlePinch}>I respond to Pinch events</Pinchable>\n<TapAndPinchable onTap={this.handleTapEvent} onPinch={this.handlePinch}>In respond to both!</TapAndPinchable>\n```\n\nThe `TapAndPinchable` component is the default one you get when you just import `react-tappable`.\n\n### Properties\n\n* `activeDelay` ms delay before the `-active` class is added, defaults to `0`\n* `component` component to render, defaults to `'span'`\n* `classes` optional object containing `active` and `inactive` class names to apply to the component; useful with [css-modules](https://github.com/css-modules/css-modules)\n* `classBase` base to use for the active/inactive classes\n* `className` optional class name for the component\n* `moveThreshold` px to allow movement before cancelling a tap; defaults to `100`\n* `pressDelay` ms delay before a press event is detected, defaults to `1000`\n* `pressMoveThreshold` px to allow movement before ignoring long presses; defaults to `5`\n* `preventDefault` (boolean) automatically call preventDefault on all events\n* `stopPropagation` (boolean) automatically call stopPropagation on all events\n* `style` (object) styles to apply to the component\n\n### Special Events\n\nThese are the special events implemented by `Tappable`.\n\n* `onTap` fired when touchStart or mouseDown is followed by touchEnd or mouseUp within the moveThreshold\n* `onPress` fired when a touch is held for the specified ms\n* `onPinchStart` fired when two fingers land on the screen\n* `onPinchMove` fired on any movement while two fingers are on screen\n* `onPinchEnd` fired when less than two fingers are left on the screen, onTouchStart is triggerred, if one touch remains\n\n#### Pinch Events\n\nPinch events come with a special object with additional data to actually be more useful than the native events:\n\n* `touches`: Array of Objects - {identifier, pageX, pageY} - raw data from the event\n* `center`: Object - {x, y} - Calculated center between the two touch points\n* `angle`: Degrees - angle of the line connecting the two touch points to the X-axis\n* `distance`: Number of pixels - beween the two touch points\n* `displacement`: Object {x, y} - offset of the center since the pinch began\n* `displacementVelocity`: Object {x, y} : Pixels/ms - Immediate velocity of the displacement\n* `rotation`: degrees - delta rotation since the beginning of the gesture\n* `rotationVelocity`: degrees/millisecond - immediate rotational velocity\n* `zoom`: Number - Zoom factor - ratio between distance between the two touch points now over initial\n* `zoomVelocity`: zoomFactor/millisecond - immediate velocity of zooming\n* `time`: milliseconds since epoch - Timestamp\n\n#### Known Issues\n\n* The pinch implementation has not been thoroughly tested\n* Any touch event with 3 three or more touches is completely ignored.\n\n### Native Events\n\nThe following native event handlers can also be specified.\n\n* `onKeyDown`\n* `onKeyUp`\n* `onTouchStart`\n* `onTouchMove`\n* `onTouchEnd`\n* `onMouseDown`\n* `onMouseUp`\n* `onMouseMove`\n* `onMouseOut`\n\nReturning `false` from `onKeyDown`, `onMouseDown`, or `onTouchStart` handlers will prevent `Tappable` from handling the event.\n\n## Changelog\n\nSee [CHANGES.md](https://github.com/JedWatson/react-tappable/blob/master/CHANGES.md)\n\n## License\n\nCopyright (c) 2017 Jed Watson. [MIT](LICENSE)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/JedWatson/react-tappable.git"
  },
  "scripts": {
    "build": "gulp clean && NODE_ENV=production gulp build",
    "bump": "gulp bump",
    "bump:major": "gulp bump:major",
    "bump:minor": "gulp bump:minor",
    "examples": "gulp dev:server",
    "lint": "eslint ./; true",
    "publish:site": "NODE_ENV=production gulp publish:examples",
    "release": "NODE_ENV=production gulp release",
    "start": "gulp dev",
    "test": "echo \"no tests yet\" && exit 0",
    "watch": "gulp watch:lib"
  },
  "version": "1.0.0"
}
